Android SDK (Software Development Kit)
● Saat kita membuat aplikasi Android menggunakan Android Studio, maka kita membutuhkan
   Android SDK (Software Development Kit)
● Android SDK akan terinstall secara otomatis ketika pertama kali kita membuat project, namun
   kadang kita ingin menambah fitur atau melakukan update terhadap Android SDK yang kita install
● Kita bisa menggunakan Android Studio untuk melakukan management Android SDK


Android Compatibility
● Karena Android adalah sistem operasi yang Open Source, maka banyak sekali vendor yang
   membuat device yang menggunakan sistem operasi Android
● Dari mulai smartphone, tablet, smart tv sampai dashboard untuk mobil
● Oleh karena itu, kita perlu berhati-hati untuk memastikan kode program kita bisa berjalan di device yang berbeda
● Salah satu yang paling penting adalah, memilih Android API Level yang ingin kita gunakan
● Saat kita membuat aplikasi Android, kita perlu menentukan API Level minimal yang akan kita
   gunakan, hal ini dilakukan untuk memastikan aplikasi kita bisa berjalan dengan baik pada sistem operasi Android yang menggunakan API Level tersebut


Menentukan API Level
● Semakin tinggi API Level yang kita pilih, semakin banyak fitur yang bisa digunakan, tapi semakin
   sedikit juga device yang sudah menggunakan API Level tersebut
● Oleh karena itu, kita perlu hati-hati menentukan API Level minimal yang akan kita gunakan untuk membuat aplikasi Android
● Salah satu yang paling mudah, kita bisa melihat statistic pengguna device Android berdasarkan API Level nya


Android Release Note
● Untuk melihat daftar fitur apa saja yang terdapat di versi Android tertentu, kita bisa melihat
   detailnya di release note Android nya
● https://developer.android.com/about/versions?hl=id


Membuat Project
● Buat project baru menggunakan Empty Activity


Struktur project android studio

secara default setelah project di buat bisa multi module gradle dependency

folder /app = adalah project dari android nya
        -> /libs = adalah folder dimana nanti butuh library yang tidak menggunakan gradle dependecy management. cukup copy paste library nya di folder libs, (tidak di rekomendasikan)
        -> /src = adalah tempat menyimpan kode android nya
            -> /androidTest = tempat test yang membutuhkan di jalankan aplikasi di android (integration test)
            -> /main = menyimpan kode utama kita, kode kotlin dan juga java
                -> /java = tempat kode backend
                -> /res = tempat resource yang bukan kode.. yaitu gambar, file, music
            -> /test = unit testing (Junit5), test layer layer yang ada di backand project android


Gradle struktur project nya
file /project/build.gradle.kts = sebernya ini hanya parent project nya saja
file /project/settings.gradle.kts = ini adalah file utama gradle nya.. karna dia ada kode -->  include : 'app'
file /project/app/build.gradle.kts = di sinilah detail dari project android kita, ada plugin{}, android{}


Android Virtual Device
● Saat kita membuat aplikasi Android, kita tidak bisa menjalankan aplikasinya di sistem operasi
   Windows, Mac atau Linux yang kita gunakan
● Kita membutuhkan sistem operasi Android untuk menjalankan aplikasi Android kita
● Ada dua cara menjalankan aplikasi Android kita, pertama menggunakan device Android kita, kedua
   membuat Virtual Device
● Dan untungnya Android SDK mendukung kita untuk membuat Virtual Device, sehingga akan
   memudahkan kita menjalankan sistem operasi Android secara virtual


Android Build System
● Android build system akan melakukan kompilasi aplikasi dari kode program dan resource dan
   mem-package semuanya menjadi sebuah aplikasi Android
● Android Studio menggunakan Gradle, untuk melakukan otomatisasi semua proses tersebut,
   sehingga kita tidak perlu melakukannya secara manual lagi menggunakan Android Build System
● Gradle dan Android Build System sendiri sebenarnya bisa berjalan secara independen, oleh karena
   itu kita wajib menggunakan Android Studio, namun dengan menggunakan Android Studio, akan mempermudah kita ketika membuat aplikasi Android

Proses Build
● Compiler akan melakukan kompilasi semua kode kita menjadi DEX (Dalvix Executable) file
● API Packager akan menandai file apakah ini versi debug atau release, sebelum akhirnya dijadikan aplikasi file APK (Android Application Package)

Konfigurasi Modul Aplikasi
● Setiap module di project, terdapat gradle file build.gradle yang berisikan konfigurasi dari module aplikasi
● Kita perlu menentukan konfigurasi pada modul aplikasi sesuai dengan build configuration yang kita
   gunakan, misal kita harus pastikan sdk dan target sdk nya sesuai dengan yang kita gunakan misalnya
● Selain kita juga perlu menentukan applicationId, yang mana itu adalah id dari aplikasi kita, dan
   harus unik secara global, artinya tidak boleh ada yang sama


Android Application Package
● Sebelum menjalankan aplikasi kita, kita perlu mem-package aplikasi Android kita dalam format
   APK (Android Application Package)
● Namun hal ini tidak perlu kita lakukan manual, karena secara otomatis Android Studio akan
   menggunakan Gradle untuk membuat APK secara otomatis, lalu mengirimnya ke Device Android
   yang kita pilih (Virtual Device atau Device Asli)



App Component (Komponen Aplikasi)
Aplikasi Android pada dasarnya terdiri dari lima jenis komponen berbeda:

    Activity (Aktivitas)
    Activity di Android adalah komponen penting yang mewakili satu layar dengan antarmuka pengguna. Ini seperti jendela di aplikasi desktop.
    Aplikasi Android biasanya terdiri dari satu atau lebih aktivitas, masing-masing memiliki antarmuka yang memungkinkan interaksi pengguna.
    Saat aplikasi diluncurkan, sebuah instance Activitydibuat, memulai siklus hidup aplikasi tersebut. Setiap aktivitas memiliki siklus hidupnya sendiri (buat, mulai,
    lanjutkan, jeda, hentikan, hancurkan) yang menjaga status kemajuan pengguna, dan Android mengelola status ini secara otomatis. Aktivitas juga bisa memiliki Intent,
    yang memungkinkannya berinteraksi dengan komponen lain, seperti memulai aktivitas lain atau mendapatkan hasil dari aktivitas tersebut.

    Services (Layanan)
    Layanan : Layanan di Android adalah komponen aplikasi yang melakukan operasi di latar belakang tanpa antarmuka pengguna. Ini bisa dimulai oleh komponen aplikasi,
    seperti aktivitas, dan akan terus berjalan di latar belakang meskipun pengguna beralih ke aplikasi lain. Ada dua jenis layanan di Android, yaitu,
    Started Servicedan Bound Service. A Started Servicedigunakan untuk melakukan satu operasi, seperti mengunduh file besar. Di sisi lain,
    a Bound Servicemenawarkan antarmuka klien-server yang memungkinkan komponen berinteraksi dengan layanan, mengirim permintaan, menerima hasil,
    dan bahkan melakukan komunikasi antarproses (IPC).

    Content Provider (Penyedia konten)
    Penyedia Konten di Android adalah komponen kunci yang memungkinkan aplikasi berbagi data dengan aplikasi lain secara aman.
    Mereka bertindak sebagai lapisan antara database dan aplikasi untuk meningkatkan keamanan data. Penyedia konten mengelola akses ke kumpulan data
    terstruktur dengan menangani transaksi data, menerapkan keamanan data, dan menjaga isolasi antar aplikasi. Mereka menyediakan antarmuka abstrak yang
    digunakan untuk mengakses data, sementara metode penyimpanan yang mendasarinya (Seperti database SQLite, web, atau metode lainnya) tetap tersembunyi.
    Mekanisme ini membantu mengambil data dari sumber non-relasional dengan cara yang terstruktur. Mereka digunakan terutama ketika data perlu dibagikan antar beberapa aplikasi,
    tidak hanya dalam satu aplikasi.

    Broadcast Receiver (Penerima siaran)
    Penerima Siaran di Android adalah komponen yang merespons pengumuman siaran di seluruh sistem. Mereka dapat didaftarkan untuk merespons jenis siaran tertentu
    atau menerapkan siaran yang ditentukan pengguna. Meskipun Anda dapat memulai siaran dari aplikasi Anda, siaran tersebut umumnya digunakan untuk
    menerima pemberitahuan sistem atau berkomunikasi dengan aplikasi lain. Namun, perlu diingat bahwa mereka tidak dapat menampilkan antarmuka pengguna,
    tetapi mereka dapat memulai aktivitas jika diperlukan, yang memang memiliki antarmuka pengguna. Sebuah BroadcastReceiverkelas harus mengganti onReceive()
    metode di mana setiap pesan diterima sebagai Intentparameter objek.

    Intent (Maksud)
    ”Intent” di Android adalah mekanisme perangkat lunak yang digunakan untuk pengikatan waktu proses yang terlambat antar komponen, seperti aktivitas,
    penyedia konten, dan layanan. Ini pada dasarnya adalah struktur data pasif yang menyimpan deskripsi abstrak dari operasi yang diminta untuk dilakukan
    oleh sistem Android. Intent bisa bersifat eksplisit, di mana Anda menentukan komponen untuk memulai atau implisit, di mana Anda mendeklarasikan tindakan
    umum yang akan dilakukan, sehingga memungkinkan komponen dari aplikasi lain untuk menanganinya. Maksud implisit sering kali digunakan untuk meminta fungsionalitas
    aplikasi lain, seperti menunjukkan lokasi di peta kepada pengguna atau mengambil foto. “Filter Intent” kemudian digunakan oleh komponen untuk mengiklankan kemampuannya
    dalam menangani berbagai jenis maksud.

Manifest File
● Setiap project Android, wajib memiliki Manifest File yaitu AndroidManifest.xml
● Manifest File berisikan informasi dari aplikasi yang kita buat, seperti informasi Activity, Permission,
   Intent, Content Provider, Broadcast Receiver, Service, dan lain-lain
● https://developer.android.com/guide/topics/manifest/manifest-intro?hl=id


Activity (method main nya android)
● Saat kita membuat aplikasi seperti di Java atau di Kotlin, biasanya ketika akan membuat main
   function sebagai function yang akan diluncurkan ketika aplikasi berjalan
● Di Android tidak seperti itu, Android memiliki fitur yang bernama Activity, dimana nanti object
   Activity tersebut akan secara otomatis dijalankan oleh Android
● Pada kelas ini kita tidak akan membahas detail tentang Activity, kita akan membahasnya nanti di
   kelas khusus tentang Activity, karena materi Activity sangat banyak

Class Activity
● Untuk membuat Activity, kita perlu membuat class turunan dari Activity
● Saat kita membuat project Android, secara otomatis akan ada sebuah MainActivity yang
   merupakan class turunan dari AppCompatActivity
● AppCompatActivity merupakan turunan dari class Activity yang memungkinkan kita menggunakan
   fitur baru Android di versi Android lama, oleh karena itu direkomendasikan menggunakan class AppCompatActivity
● https://developer.android.com/reference/android/app/Activity

Mendaftarkan Activity
● Untuk memberitahu kepada Android, bahwa kita membuat Activity, kita harus mendaftarkannya di Manifest File
● Selain itu, kita perlu menambahkan intent untuk menambahkan informasi seperti misalnya,
   menandai sebuah Activity bahwa ini adalah Main Activity, dan menandai bahwa Activity ini harus
   dijalankan ketika aplikasi Android diluncurkan/dibuka (LAUNCH)

Activity Callback
● Activity itu memiliki banyak sekali function, nanti kita akan bahas di kelas tersendiri
● Salah satu function yang dipanggil ketika Activity dibuat adalah onCreate()


Layout
● Activity bukanlah tampilan UI, tapi biasanya Activity itu akan menampilkan tampilan UI
● Android memisahkan antara kode program dan tampilan UI, namanya adalah Layout
● Layout merupakan kode yang berisikan tampilan UI
● Layout di Android menggunakan XML, sehingga yang terbiasa menggunakan HTML, akan mudah beradaptasi

R Class
● Saat kita membuat Layout baru, secara otomatis Android akan melakukan auto generate sebuah variable berisikan id layout yang sesuai dengan nama Layout nya
● Dan untuk menentukan Layout mana yang akan ditampilkan di Activity, kita bisa menggunakan function setContentView(layout_id)


View
● Semua komponen UI di Android adalah turunan View
● Ada banyak sekali komponen yang terdapat di Android, dan akan dibahas di kelas terpisah
● Bahkan Layout sendiri adalah turunan dari class View
● https://developer.android.com/reference/android/view/View

Menambah View
● Untuk menambah View, kita bisa menyebutkan View yang ingin kita gunakan di Layout yang sudah kita buat
● Setiap komponen View memiliki banyak atribut yang bisa kita ubah, misal Button, Label dan Text
   memiliki atribut text yang bisa kita ubah untuk mengubah tulisan text nya

View ID
Find View by Id
● Saat kita menambahkan komponen ke Layout, kadang kita ingin mendapatkan object dari komponen tersebut
● Caranya adalah kita bisa menggunakan function findViewById()
● Namun sebelum kita bisa menggunakan function tersebut, kita perlu menambahkan id terhadap
   komponen yang ingin kita ambil objectnya

View ID
● Untuk menambahkan View ID, kita bisa menambahkan atribut id pada komponen nya
● Namun caranya kita perlu menggunakan nilai @+id/namaIdNya
● Android Build System akan secara otomatis membuatkan id tersebut sebagai id component di class R, mirip seperti pada Layout
● Best Practice penamaan view ID adalah nama diikuti dengan jenis komponen, misal : nameEditText,
   sayHelloButton, firstNameEditText, lastNameEditText, registerButton, dan lain-lain


Action Listener
● Beberapa jenis component memiliki Action Listener
● Yaitu object yang bisa kita tambahkan ke komponen ketika sebuah aksi dilakukan ke komponen tersebut
● Detail dari Action Listener akan kita bahas di kelas khusus membahas Android View
● Contoh sederhana, pada Button, terdapat Click Listener yang bisa digunakan untuk menambahkan object Listener ketika tombol
   di Click menggunakan function setOnClickListener(listener)